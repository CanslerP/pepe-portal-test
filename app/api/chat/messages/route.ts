import { NextRequest, NextResponse } from 'next/server'
import { promises as fs } from 'fs'
import path from 'path'

const MESSAGES_FILE = path.join(process.cwd(), 'data', 'chat-messages.json')

interface ChatMessage {
  id: string
  content: string
  author: {
    address: string
    nickname: string
    shellBalance: number
  }
  timestamp: string
  isSystem?: boolean
}

// –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function ensureDataDir() {
  const dataDir = path.join(process.cwd(), 'data')
  try {
    await fs.access(dataDir)
  } catch {
    await fs.mkdir(dataDir, { recursive: true })
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
async function loadMessages(): Promise<ChatMessage[]> {
  try {
    await ensureDataDir()
    const data = await fs.readFile(MESSAGES_FILE, 'utf-8')
    const messages = JSON.parse(data)
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    const now = new Date()
    const dayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000)
    
    const filteredMessages = messages.filter((msg: ChatMessage) => {
      return new Date(msg.timestamp) > dayAgo
    })
    
    // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if (filteredMessages.length !== messages.length) {
      await saveMessages(filteredMessages)
    }
    
    return filteredMessages
  } catch (error) {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    const systemMessages: ChatMessage[] = [
      {
        id: '1',
        content: 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PEPE Chat 2000! –û–ª–¥—Å–∫—É–ª—å–Ω—ã–π —á–∞—Ç –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π!',
        author: { address: '0x000', nickname: '–°–ò–°–¢–ï–ú–ê', shellBalance: 0 },
        timestamp: new Date(Date.now() - 600000).toISOString(),
        isSystem: true
      },
      {
        id: '2',
        content: 'üìã –ü—Ä–∞–≤–∏–ª–∞: –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã, –Ω–µ —Å–ø–∞–º—å—Ç–µ, –º–∏–Ω–∏–º—É–º 1 PEPE Shell –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
        author: { address: '0x000', nickname: '–°–ò–°–¢–ï–ú–ê', shellBalance: 0 },
        timestamp: new Date(Date.now() - 540000).toISOString(),
        isSystem: true
      },
      {
        id: '3',
        content: 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞',
        author: { address: '0x000', nickname: '–°–ò–°–¢–ï–ú–ê', shellBalance: 0 },
        timestamp: new Date(Date.now() - 480000).toISOString(),
        isSystem: true
      }
    ]
    
    await saveMessages(systemMessages)
    return systemMessages
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
async function saveMessages(messages: ChatMessage[]) {
  await ensureDataDir()
  await fs.writeFile(MESSAGES_FILE, JSON.stringify(messages, null, 2))
}

// GET - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function GET() {
  try {
    const messages = await loadMessages()
    return NextResponse.json({ messages })
  } catch (error) {
    console.error('Error loading messages:', error)
    return NextResponse.json({ error: 'Failed to load messages' }, { status: 500 })
  }
}

// POST - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { content, author } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!content || !author || !author.address || !author.nickname) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 })
    }

    if (content.length > 500) {
      return NextResponse.json({ error: 'Message too long' }, { status: 400 })
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      content: content.trim(),
      author: {
        address: author.address,
        nickname: author.nickname,
        shellBalance: author.shellBalance || 0
      },
      timestamp: new Date().toISOString()
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    const messages = await loadMessages()
    messages.push(newMessage)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await saveMessages(messages)

    return NextResponse.json({ message: newMessage })
  } catch (error) {
    console.error('Error saving message:', error)
    return NextResponse.json({ error: 'Failed to save message' }, { status: 500 })
  }
} 