import { NextRequest, NextResponse } from 'next/server'
import { saveHoldersData, initDatabase } from '@/lib/database'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
let dbInitialized = false

async function ensureDbInitialized() {
  if (!dbInitialized) {
    await initDatabase()
    dbInitialized = true
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Å Etherscan
async function fetchHoldersFromEtherscan(): Promise<number> {
  const etherscanUrl = 'https://etherscan.io/token/0x6982508145454ce325ddbe47a25d4ec3d2311933'
  
  const response = await fetch(etherscanUrl, {
    headers: {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    },
    signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  })

  if (!response.ok) {
    throw new Error(`Failed to fetch: ${response.status}`)
  }

  const html = await response.text()
  let holdersCount = 0
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ HTML
  const patterns = [
    // –ü–æ–∏—Å–∫ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "addresses" –∏–ª–∏ "holders"
    /(\d{1,3}(?:,\d{3})*)\s*(?:addresses|holders?)/gi,
    // –ü–æ–∏—Å–∫ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    /(?:holders?|addresses)[:\s]*(\d{1,3}(?:,\d{3})*)/gi,
    // –ü–æ–∏—Å–∫ –≤ meta —Ç–µ–≥–∞—Ö –∏–ª–∏ data –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    /data-holders["\s]*=[\s"]*(\d{1,3}(?:,\d{3})*)/gi,
    // –ü–æ–∏—Å–∫ –≤ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
    /"holders?["\s]*:["\s]*(\d{1,3}(?:,\d{3})*)/gi
  ]
  
  for (const pattern of patterns) {
    const matches = Array.from(html.matchAll(pattern))
    for (const match of matches) {
      const numberStr = match[1] || match[2] // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞
      if (numberStr) {
        const count = parseInt(numberStr.replace(/,/g, ''))
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—É–º–Ω—ã–µ —á–∏—Å–ª–∞ (–±–æ–ª—å—à–µ 1000, –Ω–æ –º–µ–Ω—å—à–µ 1 –º–∏–ª–ª–∏–∞—Ä–¥–∞)
        if (count > 1000 && count < 1000000000 && count > holdersCount) {
          holdersCount = count
        }
      }
    }
    if (holdersCount > 0) break
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∏—â–µ–º –ª—é–±—ã–µ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –≤ HTML
  if (holdersCount === 0) {
    const numberMatches = Array.from(html.matchAll(/\b(\d{1,3}(?:,\d{3})+)\b/g))
    for (const match of numberMatches) {
      const count = parseInt(match[1].replace(/,/g, ''))
      // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      if (count > 10000 && count < 1000000 && count > holdersCount) {
        holdersCount = count
      }
    }
  }

  return holdersCount
}

export async function POST(request: NextRequest) {
  try {
    await ensureDbInitialized()
    
    console.log('üîÑ Starting holders data update...')
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Etherscan
    const holdersCount = await fetchHoldersFromEtherscan()
    
    if (holdersCount === 0) {
      return NextResponse.json({
        success: false,
        error: 'Could not parse holders count from Etherscan'
      }, { status: 400 })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const currentDate = new Date().toISOString().split('T')[0]
    const timestamp = Date.now()
    
    const savedData = await saveHoldersData({
      date: currentDate,
      holdersCount,
      timestamp
    })

    console.log('‚úÖ Holders data updated successfully:', savedData)

    return NextResponse.json({
      success: true,
      message: 'Holders data updated successfully',
      data: savedData
    })

  } catch (error) {
    console.error('‚ùå Error updating holders data:', error)
    
    return NextResponse.json({
      success: false,
      error: 'Failed to update holders data',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
export async function GET(request: NextRequest) {
  // –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ POST –º–µ—Ç–æ–¥
  return POST(request)
} 