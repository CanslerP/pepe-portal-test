'use client';

import { useState, useCallback, useEffect } from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { useActiveAccount } from "thirdweb/react";
import { type GameRoom } from '@/hooks/useGameRooms';
import { usePepeShells } from '@/hooks/usePepeShells';
import ConnectionStatus from '../ConnectionStatus';
import { useSocketIO } from '@/hooks/useSocketIO';

// –¢–∏–ø—ã –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
type CellType = 'X' | 'O' | null;

interface TicTacToeMove {
  player: 'X' | 'O';
  position: { row: number; col: number };
  moveNumber: number;
  timestamp: Date;
}

interface TicTacToeGameState {
  board: CellType[][];
  currentPlayer: 'X' | 'O';
  moveHistory: TicTacToeMove[];
  moveNumber: number;
  gameStatus: 'playing' | 'finished';
  winner?: 'X' | 'O';
}

interface TicTacToeGameProps {
  gameRoom?: GameRoom;
}

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ)
const GameContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px;
  padding: 20px;
`;

const GameTitle = styled.h2`
  font-family: 'Press Start 2P', monospace;
  font-size: 1.5rem;
  color: #00ffff;
  text-align: center;
  text-shadow: 0 0 10px #00ffff;
`;

const GameInfo = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  max-width: 400px;
  gap: 20px;
`;

const PlayerInfo = styled.div<{ isActive: boolean }>`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 15px;
  border: 2px solid ${props => props.isActive ? '#00ff00' : '#666'};
  border-radius: 10px;
  background: ${props => props.isActive ? 'rgba(0, 255, 0, 0.1)' : 'rgba(0, 0, 0, 0.3)'};
  transition: all 0.3s ease;

  ${props => props.isActive && `
    box-shadow: 0 0 20px #00ff00;
    animation: pulse 2s ease-in-out infinite;
  `}

  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }
`;

const Board = styled.div`
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  gap: 3px;
  width: 300px;
  height: 300px;
  background: #333;
  border-radius: 8px;
  padding: 3px;
`;

const Cell = styled(motion.div)<{ hasSymbol: boolean; isClickable?: boolean }>`
  background: #1a1a1a;
  border-radius: 4px;
  cursor: ${props => props.hasSymbol ? 'default' : props.isClickable ? 'pointer' : 'not-allowed'};
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: 'Press Start 2P', monospace;
  font-size: 2rem;

  &:hover {
    background: ${props => 
      props.hasSymbol 
        ? '#1a1a1a' 
        : props.isClickable
          ? 'rgba(0, 255, 255, 0.2)' 
          : 'rgba(255, 0, 0, 0.1)'
    };
  }
`;

const Symbol = styled(motion.span)<{ symbol: 'X' | 'O' }>`
  color: ${props => props.symbol === 'X' ? '#ff0066' : '#00ffff'};
  text-shadow: 0 0 15px ${props => props.symbol === 'X' ? '#ff0066' : '#00ffff'};
`;

const StatusMessage = styled.div`
  font-family: 'Orbitron', monospace;
  font-size: 1rem;
  color: #00ff00;
  text-align: center;
  text-shadow: 0 0 10px #00ff00;
  margin-bottom: 10px;
`;

const OnlineStatus = styled.div`
  font-family: 'Orbitron', monospace;
  font-size: 0.9rem;
  color: #ffff00;
  text-align: center;
  margin: 10px 0;
`;

const NotificationPanel = styled(motion.div)<{ type: 'success' | 'error' | 'info' }>`
  background: ${props => 
    props.type === 'success' ? 'rgba(0, 255, 0, 0.2)' :
    props.type === 'error' ? 'rgba(255, 0, 0, 0.2)' :
    'rgba(0, 255, 255, 0.2)'
  };
  border: 2px solid ${props => 
    props.type === 'success' ? '#00ff00' :
    props.type === 'error' ? '#ff0000' :
    '#00ffff'
  };
  border-radius: 10px;
  padding: 15px;
  margin: 15px 0;
  text-align: center;
  font-family: 'Orbitron', monospace;
  color: ${props => 
    props.type === 'success' ? '#00ff00' :
    props.type === 'error' ? '#ff0000' :
    '#00ffff'
  };
`;

// üöÄ –ù–û–í–´–ô Railway-optimized –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function TicTacToeGameRailway({ gameRoom }: TicTacToeGameProps) {
  const account = useActiveAccount();
  const { balance, addShells, refreshBalance } = usePepeShells();
  
  const [board, setBoard] = useState<CellType[][]>(() => 
    Array(3).fill(null).map(() => Array(3).fill(null))
  );
  
  const [gameStats, setGameStats] = useState<TicTacToeGameState>({
    board: Array(3).fill(null).map(() => Array(3).fill(null)),
    currentPlayer: 'X',
    moveHistory: [],
    moveNumber: 0,
    gameStatus: 'playing'
  });

  const [isMyTurn, setIsMyTurn] = useState(false);
  const [mySymbol, setMySymbol] = useState<'X' | 'O' | null>(null);
  const [notification, setNotification] = useState<string | null>(null);
  const [playersConnected, setPlayersConnected] = useState<string[]>([]);

  // üîå Socket.IO –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const {
    isConnected,
    isConnecting,
    gameState: socketGameState,
    sendGameAction
  } = useSocketIO({
    roomId: gameRoom?.id || '',
    onGameUpdate: (data) => {
      console.log('üéÆ Real-time game update:', data);
      
      if (data.gameState) {
        setBoard(data.gameState.board);
        setGameStats(data.gameState);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ–¥
        if (mySymbol) {
          setIsMyTurn(data.gameState.currentPlayer === mySymbol);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–º —Ö–æ–¥–µ
        if (data.undoMove) {
          setNotification(`üîÑ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ö–æ–¥: ${data.undoMove.player} —Å –ø–æ–∑–∏—Ü–∏–∏ (${data.undoMove.position.row + 1}, ${data.undoMove.position.col + 1})`);
          setTimeout(() => setNotification(null), 3000);
        }
      }
    },
    onPlayerJoined: (data) => {
      console.log('üëã Player joined:', data.playerAddress);
      setNotification(`‚úÖ ${data.playerAddress.slice(0, 6)}... –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!`);
      setTimeout(() => setNotification(null), 3000);
    },
    onPlayerLeft: (data) => {
      console.log('üëã Player left:', data.playerAddress);
      setNotification(`‚ùå ${data.playerAddress.slice(0, 6)}... –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É`);
      setTimeout(() => setNotification(null), 3000);
    },
    onError: (error) => {
      setNotification(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
      setTimeout(() => setNotification(null), 3000);
    }
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (!gameRoom || !account?.address) return;
    
    if (gameRoom.creator === account.address) {
      setMySymbol('X');
      setIsMyTurn(gameStats.currentPlayer === 'X');
    } else if (gameRoom.opponent === account.address) {
      setMySymbol('O');
      setIsMyTurn(gameStats.currentPlayer === 'O');
    }
  }, [gameRoom, account, gameStats.currentPlayer]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Socket.IO —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    if (socketGameState) {
      setBoard(socketGameState.board);
      setGameStats(socketGameState);
    }
  }, [socketGameState]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    if (gameStats.gameStatus === 'finished' && gameStats.winner && mySymbol) {
      const isWinner = gameStats.winner === mySymbol;
      const betAmount = gameRoom?.betAmount || 0;
      
      if (isWinner) {
        const winnings = betAmount * 2;
        addShells(winnings, `Won tic-tac-toe game - prize ${winnings} SHELLS`);
        setNotification(`üéâ –ü–æ–±–µ–¥–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winnings} PEPE SHELLS!`);
      } else {
        setNotification(`üòû –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${betAmount} PEPE SHELLS.`);
      }
      
      refreshBalance();
      setTimeout(() => setNotification(null), 5000);
    }
  }, [gameStats.gameStatus, gameStats.winner, mySymbol, gameRoom, addShells, refreshBalance]);

  // üéØ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ö–æ–¥ —á–µ—Ä–µ–∑ Socket.IO
  const makeMove = useCallback(async (row: number, col: number) => {
    if (board[row][col] !== null || gameStats.gameStatus !== 'playing') return;
    if (!isMyTurn || !mySymbol || !gameRoom?.id || !account?.address) return;

    console.log('üéÆ Making move via Socket.IO:', { row, col, mySymbol });

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    const optimisticBoard = board.map(r => [...r]);
    optimisticBoard[row][col] = mySymbol;
    setBoard(optimisticBoard);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Socket.IO
    const success = sendGameAction({
      action: 'makeMoveTicTacToe',
      move: { row, col }
    });

    if (!success) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      setBoard(board);
      setNotification('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      setTimeout(() => setNotification(null), 3000);
    }
  }, [board, gameStats, isMyTurn, mySymbol, gameRoom, account, sendGameAction]);

  const getGameStatus = () => {
    if (gameStats.gameStatus === 'finished') {
      if (gameStats.winner === mySymbol) {
        return '–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ';
      } else {
        return `–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ ${gameStats.winner}`;
      }
    } else if (gameRoom?.status === 'waiting') {
      return '–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...';
    } else if (isMyTurn) {
      return '–í–∞—à —Ö–æ–¥';
    } else {
      return `–•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${gameStats.currentPlayer}`;
    }
  };

  const getPlayerName = (symbol: 'X' | 'O') => {
    if (!gameRoom) return symbol;
    
    if (symbol === 'X') {
      return gameRoom.creatorName || '–ò–≥—Ä–æ–∫ X';
    } else {
      return gameRoom.opponentName || '–ò–≥—Ä–æ–∫ O';
    }
  };

  const canMakeMove = (row: number, col: number) => {
    return isMyTurn && 
           board[row][col] === null && 
           gameStats.gameStatus === 'playing' && 
           gameRoom?.status === 'playing' &&
           isConnected;
  };

  return (
    <GameContainer>
      {/* Real-time —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
      <ConnectionStatus
        isConnected={isConnected}
        isRetrying={isConnecting}
        retryAttempt={0}
        error={!isConnected && !isConnecting ? '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' : ''}
      />
      
      <GameTitle>üöÄ Real-time Tic-Tac-Toe</GameTitle>
      
      {/* –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω */}
      <OnlineStatus>
        üîå {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É' : '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'} 
        | üë• –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: {playersConnected.length}
      </OnlineStatus>
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {notification && (
        <NotificationPanel
          type={notification.includes('üéâ') ? 'success' : notification.includes('‚ùå') ? 'error' : 'info'}
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.8 }}
        >
          {notification}
        </NotificationPanel>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö */}
      <GameInfo>
        <PlayerInfo isActive={gameStats.currentPlayer === 'X'}>
          <div>{getPlayerName('X')}</div>
          <div style={{ color: '#ff0066', fontSize: '1.5rem' }}>X</div>
        </PlayerInfo>
        
        <div style={{ textAlign: 'center' }}>
          <StatusMessage>{getGameStatus()}</StatusMessage>
          <div style={{ fontSize: '0.8rem', color: '#888' }}>
            –•–æ–¥ #{gameStats.moveNumber}
          </div>
        </div>
        
        <PlayerInfo isActive={gameStats.currentPlayer === 'O'}>
          <div>{getPlayerName('O')}</div>
          <div style={{ color: '#00ffff', fontSize: '1.5rem' }}>O</div>
        </PlayerInfo>
      </GameInfo>

      {/* –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ */}
      <Board>
        {board.map((row, rowIndex) =>
          row.map((cell, colIndex) => (
            <Cell
              key={`${rowIndex}-${colIndex}`}
              hasSymbol={cell !== null}
              isClickable={canMakeMove(rowIndex, colIndex)}
              onClick={() => canMakeMove(rowIndex, colIndex) && makeMove(rowIndex, colIndex)}
              whileHover={canMakeMove(rowIndex, colIndex) ? { scale: 1.05 } : {}}
              whileTap={canMakeMove(rowIndex, colIndex) ? { scale: 0.95 } : {}}
            >
              {cell && (
                <Symbol
                  symbol={cell}
                  initial={{ scale: 0, rotate: -180 }}
                  animate={{ scale: 1, rotate: 0 }}
                  transition={{ type: "spring", stiffness: 260, damping: 20 }}
                >
                  {cell}
                </Symbol>
              )}
            </Cell>
          ))
        )}
      </Board>
    </GameContainer>
  );
} 